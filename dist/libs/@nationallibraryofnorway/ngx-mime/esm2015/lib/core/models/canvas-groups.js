export class CanvasGroups {
    constructor() {
        this.canvasGroupRects = [];
        this.canvasRects = [];
        this.canvasesPerCanvasGroup = [];
    }
    add(rect) {
        this.canvasGroupRects.push(rect);
    }
    addRange(rects) {
        this.canvasGroupRects = rects;
    }
    get(index) {
        return Object.assign({}, this.canvasGroupRects[index]);
    }
    findClosestIndex(point) {
        let i = 0;
        let lastDelta;
        if (point === null) {
            return -1;
        }
        this.canvasGroupRects.some(function (rect, index) {
            const delta = Math.abs(point.x - rect.centerX);
            if (delta >= lastDelta) {
                return true;
            }
            i = index;
            lastDelta = delta;
            return false;
        });
        return i;
    }
    getMaxHeight() {
        return Math.max.apply(Math, this.canvasGroupRects.map(function (rect) {
            return rect.height;
        }));
    }
    getMaxWidth() {
        return Math.max.apply(Math, this.canvasGroupRects.map(function (rect) {
            return rect.width;
        }));
    }
    length() {
        return this.canvasGroupRects.length;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLWdyb3Vwcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4LW1pbWUvc3JjL2xpYi9jb3JlL21vZGVscy9jYW52YXMtZ3JvdXBzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sT0FBTyxZQUFZO0lBQXpCO1FBQ0UscUJBQWdCLEdBQVcsRUFBRSxDQUFDO1FBQzlCLGdCQUFXLEdBQVcsRUFBRSxDQUFDO1FBQ3pCLDJCQUFzQixHQUFlLEVBQUUsQ0FBQztJQXNEMUMsQ0FBQztJQXBEUSxHQUFHLENBQUMsSUFBVTtRQUNuQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTSxRQUFRLENBQUMsS0FBYTtRQUMzQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxHQUFHLENBQUMsS0FBYTtRQUN0Qix5QkFBWSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUc7SUFDN0MsQ0FBQztJQUVNLGdCQUFnQixDQUFDLEtBQVk7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsSUFBSSxTQUFjLENBQUM7UUFFbkIsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDWDtRQUNELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBUyxJQUFVLEVBQUUsS0FBYTtZQUMzRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQy9DLElBQUksS0FBSyxJQUFJLFNBQVMsRUFBRTtnQkFDdEIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELENBQUMsR0FBRyxLQUFLLENBQUM7WUFDVixTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ2xCLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFTSxZQUFZO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQ25CLElBQUksRUFDSixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFVBQVMsSUFBSTtZQUNyQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTSxXQUFXO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQ25CLElBQUksRUFDSixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFVBQVMsSUFBSTtZQUNyQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNO1FBQ1gsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDO0lBQ3RDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi9wb2ludCc7XG5pbXBvcnQgeyBSZWN0IH0gZnJvbSAnLi9yZWN0JztcblxuZXhwb3J0IGNsYXNzIENhbnZhc0dyb3VwcyB7XG4gIGNhbnZhc0dyb3VwUmVjdHM6IFJlY3RbXSA9IFtdO1xuICBjYW52YXNSZWN0czogUmVjdFtdID0gW107XG4gIGNhbnZhc2VzUGVyQ2FudmFzR3JvdXA6IG51bWJlcltdW10gPSBbXTtcblxuICBwdWJsaWMgYWRkKHJlY3Q6IFJlY3QpOiB2b2lkIHtcbiAgICB0aGlzLmNhbnZhc0dyb3VwUmVjdHMucHVzaChyZWN0KTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRSYW5nZShyZWN0czogUmVjdFtdKTogdm9pZCB7XG4gICAgdGhpcy5jYW52YXNHcm91cFJlY3RzID0gcmVjdHM7XG4gIH1cblxuICBwdWJsaWMgZ2V0KGluZGV4OiBudW1iZXIpOiBSZWN0IHtcbiAgICByZXR1cm4geyAuLi50aGlzLmNhbnZhc0dyb3VwUmVjdHNbaW5kZXhdIH07XG4gIH1cblxuICBwdWJsaWMgZmluZENsb3Nlc3RJbmRleChwb2ludDogUG9pbnQpOiBudW1iZXIge1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbGFzdERlbHRhOiBhbnk7XG5cbiAgICBpZiAocG9pbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgdGhpcy5jYW52YXNHcm91cFJlY3RzLnNvbWUoZnVuY3Rpb24ocmVjdDogUmVjdCwgaW5kZXg6IG51bWJlcikge1xuICAgICAgY29uc3QgZGVsdGEgPSBNYXRoLmFicyhwb2ludC54IC0gcmVjdC5jZW50ZXJYKTtcbiAgICAgIGlmIChkZWx0YSA+PSBsYXN0RGVsdGEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpID0gaW5kZXg7XG4gICAgICBsYXN0RGVsdGEgPSBkZWx0YTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICByZXR1cm4gaTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRNYXhIZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkoXG4gICAgICBNYXRoLFxuICAgICAgdGhpcy5jYW52YXNHcm91cFJlY3RzLm1hcChmdW5jdGlvbihyZWN0KSB7XG4gICAgICAgIHJldHVybiByZWN0LmhlaWdodDtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRNYXhXaWR0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLm1heC5hcHBseShcbiAgICAgIE1hdGgsXG4gICAgICB0aGlzLmNhbnZhc0dyb3VwUmVjdHMubWFwKGZ1bmN0aW9uKHJlY3QpIHtcbiAgICAgICAgcmV0dXJuIHJlY3Qud2lkdGg7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzR3JvdXBSZWN0cy5sZW5ndGg7XG4gIH1cbn1cbiJdfQ==